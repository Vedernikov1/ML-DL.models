# -*- coding: utf-8 -*-
"""LinearRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nH7bFVcPUm5dWjeIiwR1uAwD-dxWW-H1
"""

np.random.seed(42)

class LinearRegression:
    def __init__(self):
        self.weights = None
        self.samples_num, self.features_num = None, None

    def fit(self, train_x, train_y, epoch_nums, learning_rate, regular='L2', loss_function='MSE'):
        # Добавление 1 размерности
        self.samples_num, self.features_num = train_x.shape
        train_x = np.hstack((train_x, np.ones((self.samples_num, 1))))
     
        # Инициализация весов
        self.weights = np.random.randn(self.features_num + 1)
     
        # Основной цикл обучения
        for _ in range(epoch_nums):
            gradient = self.regularization(self.score_gradient(train_x, train_y, loss_function), regular)
            self.weights = self.weights - learning_rate * gradient

    def score_gradient(self, train_x, train_y, loss_function):
        # Градиент по loss_function='MSE'
        if loss_function == 'MSE':
            gradient = 2 * (train_x @ self.weights - train_y) @ train_x

        # Возвращаем среднее значение градиента
        return gradient.mean()

    def regularization(self, gradient, regular, alpha=0.0001):
        # Применяем L2 регуляризацию к весам
        if regular == 'L2':
            gradient += alpha * 2 * self.weights

        # Возвращаем градиент после регуляризации
        return gradient

    def predict(self, test_x):
        # Добавление 1 размерности
        test_samples_num = test_x.shape[0]
        test_x = np.hstack((test_x, np.ones((test_samples_num, 1))))

        # Возвращаем predict нашей модели
        return test_x @ self.weights

    def get_weights(self):
        return self.weights

    def MSE(self, test_x, test_y):
        # Считаем среднюю MSE
        error = np.square(test_x - np.array(test_y).reshape(test_y.shape[0], 1))
        return error.mean()

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# Обработка DataFrame
df = pd.read_csv('water_potability.csv')
df = df.dropna()
df = (df - df.mean()) / df.std()

# Вся выборка
full_y = df.ph
full_x = df.drop(['ph'], axis=1)

# Разбиение на тренировочную и валидационную выборку
train_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 42)

# Инициализация и обучение модели
model = LinearRegression()
model.fit(train_X, train_y, 20, 0.1)

# Predict score
model.MSE(model.predict(val_X), val_y)